'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _wepy = require('./../../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _config = require('./../config.js');

var _config2 = _interopRequireDefault(_config);

var _tool = require('./tool.js');

var _tool2 = _interopRequireDefault(_tool);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 在使用的的时候 canvas-id 一定要是固定的值，不能使用data变量
 */
//框架
exports.default = {
  //画矩形框
  drawStrokeRect: function drawStrokeRect(ctx, x, y, width, height, bw, color) {
    ctx.save();
    ctx.setLineWidth(bw);
    ctx.setStrokeStyle(color);
    ctx.strokeRect(x, y, width, height);
    ctx.draw();
    ctx.restore();
  },


  //画矩形色块
  drawRect: function drawRect(ctx, x, y, width, height, color) {
    ctx.save();
    //画出背景色
    ctx.setFillStyle(color);
    ctx.fillRect(x, y, width, height);
    ctx.restore();
  },


  /**画圆角矩形 */
  drawRoundRect: function drawRoundRect(ctx, r, x, y, w, h, img) {
    ctx.save();
    if (w < 2 * r) r = w / 2;
    if (h < 2 * r) r = h / 2;
    ctx.beginPath();
    ctx.moveTo(x + r, y);
    ctx.arcTo(x + w, y, x + w, y + h, r);
    ctx.arcTo(x + w, y + h, x, y + h, r);
    ctx.arcTo(x, y + h, x, y, r);
    ctx.arcTo(x, y, x + w, y, r);
    ctx.closePath();
    ctx.clip();
    ctx.drawImage(img, x, y, w, h);
    ctx.restore(); // 返回上一状态
  },


  //画圆形头像
  drawRoundImg: function drawRoundImg(ctx, r, x, y, img, border_width, border_color) {
    ctx.save(); // 保存之前的
    var r = r; // 半径*屏幕分辨率比例
    var d = 2 * r; // 直径
    var cx = x + r; // 圆弧坐标x
    var cy = y + r; // 圆弧坐标 y
    var border_width = border_width ? border_width : 0;
    var border_color = border_color ? border_color : '#fff';
    ctx.beginPath(); //开始绘制
    ctx.arc(cx, cy, r, 0, 2 * Math.PI);
    ctx.setLineWidth(border_width);
    ctx.setStrokeStyle(border_color);
    ctx.clip(); // 裁剪
    ctx.drawImage(img, x, y, d, d); // 画头像
    ctx.restore(); // 返回上一状态
  },


  //画出圆形
  drawArc: function drawArc(ctx, r, x, y, color) {
    ctx.save(); // 保存之前的
    ctx.beginPath(); //开始绘制
    ctx.arc(x, y, r, 0, 2 * Math.PI);
    ctx.setFillStyle(color);
    ctx.fill();
    ctx.restore(); // 返回上一状态
  },


  //画文本
  drawText: function drawText(ctx, content, size, color, x, y, align_right) {
    ctx.save(); // 保存之前的
    ctx.setFontSize(size);
    ctx.fillStyle = color;
    if (align_right) {
      ctx.textAlign = 'right';
    }
    ctx.fillText(content, x, y);
    ctx.restore(); // 返回上一状态
  },


  //画图片
  drawImg: function drawImg(ctx, src, x, y, width, height) {
    ctx.save(); // 保存之前的
    ctx.drawImage(src, x, y, width, height);
    ctx.restore(); // 返回上一状态
  },


  //画
  draw: function draw(canvas, config, save) {
    var _this = this;

    var context = wx.createCanvasContext(canvas.id); //
    var canvas_width = canvas.width; //这个是画布宽
    var canvas_height = canvas.height; //这个是高
    var scale = canvas.scale ? canvas.scale : 1;

    config.forEach(function (element) {
      console.log(element);
      switch (element.type) {
        case 'text':
          _config2.default.DEBUGING ? console.log('画出文字') : false;
          _this.drawText(context, element.content, element.size * scale, element.color, element.x * scale, element.y * scale, element.align_right);
          break;
        case 'img':
          _config2.default.DEBUGING ? console.log('画出图片') : false;
          if (element.src) {
            _this.drawImg(context, element.src, element.x * scale, element.y * scale, element.width * scale, element.height * scale);
          } else {
            _config2.default.DEBUGING ? console.log('图片地址没有') : false;
          }
          break;
        case 'round_img':
          _config2.default.DEBUGING ? console.log('圆形头像') : false;
          _this.drawRoundImg(context, element.r * scale, element.x * scale, element.y * scale, element.img, element.bw * scale, element.bc);
          break;
        case 'rect':
          _config2.default.DEBUGING ? console.log('画出矩形') : false;
          _this.drawRect(context, element.x * scale, element.y * scale, element.width * scale, element.height * scale, element.color);
          break;
        case 'arc':
          _config2.default.DEBUGING ? console.log('画圆') : false;
          _this.drawArc(context, element.r * scale, element.x * scale, element.y * scale, element.color);
          break;
        case 's_rect':
          _config2.default.DEBUGING ? console.log('画矩形框') : false;
          _this.drawStrokeRect(context, element.x * scale, element.y * scale, element.width * scale, element.height * scale, element.bw * scale, element.color);
          break;
      }
    });

    context.draw(true, setTimeout(function () {
      if (save) {
        console.log('保存图片');
        //导出图片
        wx.canvasToTempFilePath({ //导出图片
          x: 0,
          y: 0,
          width: canvas_width, //
          height: canvas_height,
          destWidth: canvas_width, //裁剪宽度
          destHeight: canvas_height, //裁剪高度
          canvasId: canvas.id,
          success: function success(res) {
            console.log(res.tempFilePath);
            wx.saveImageToPhotosAlbum({
              filePath: res.tempFilePath,
              success: function success(result) {
                _wepy2.default.hideLoading();
                _tool2.default.systemToast('已保存到本地相册');
              }
            });
          }
        });
      }
    }, 100));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,